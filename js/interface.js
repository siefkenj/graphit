// Generated by CoffeeScript 1.3.1
var decodeDataURI, doGraph, downloadSVG, dragEnter, dragExit, dragOver, drop, genPointSlope, genTwoPoints, handleFiles, handleReaderLoadEnd, handleReaderProgress, importSVG, makeEditable, openFile, resizeSvg, round, saveGraph;

round = function(num, places) {
  var p;
  p = Math.pow(10, places);
  return Math.round(num * p) / p;
};

/*
# Make a div/span editable upon click
*/


makeEditable = function(element, editFinishedCallback) {
  var createEditbox;
  if (editFinishedCallback == null) {
    editFinishedCallback = (function() {
      return null;
    });
  }
  createEditbox = function(parent) {
    var editbox;
    parent = $(parent);
    editbox = $('<input type="text"></input>');
    editbox.blur(function() {
      var me;
      me = $(this);
      parent.text(me.val());
      me.hide();
      parent.show();
      return editFinishedCallback();
    });
    editbox.keyup(function(event) {
      var me;
      me = $(this);
      if (event.keyCode === 13) {
        parent.text(me.val());
        me.blur();
      }
      if (event.keyCode === 27) {
        me.val(parent.text());
        return me.blur();
      }
    });
    return editbox;
  };
  element = $(element);
  return $(element).click(function() {
    var editbox, me;
    me = $(this);
    editbox = $.data(this, 'editbox');
    if (!(editbox != null)) {
      editbox = createEditbox(me);
      $.data(this, 'editbox', editbox);
    }
    editbox.val(me.text());
    me.after(editbox);
    editbox.show();
    editbox.focus();
    editbox.select();
    return me.hide();
  });
};

$(document).ready(function() {
  var dropbox;
  dropbox = document.getElementById("dropbox");
  dropbox.addEventListener("dragenter", dragEnter, false);
  dropbox.addEventListener("dragexit", dragExit, false);
  dropbox.addEventListener("dragover", dragOver, false);
  dropbox.addEventListener("drop", drop, false);
  $("#tabs").tabs();
  $(".button").button();
  $(".datepicker").datepicker();
  $("#files").change(openFile);
  $("#doGraph").click(doGraph);
  $("#downloadGraph").click(downloadSVG);
  $("#saveGraph").click(saveGraph);
  $("#gentwopoints").click(genTwoPoints);
  $("#genpointslope").click(genPointSlope);
  window.inputArea = CodeMirror.fromTextArea($("#picture1input")[0], {
    indentWithTabs: true,
    smartIndent: false,
    mode: "text/javascript"
  });
  $('.svg-stat.editable').map(function() {
    return makeEditable(this, resizeSvg);
  });
  return resizeSvg();
});

resizeSvg = function(dims) {
  var aspect;
  if (!(dims != null ? dims.width : void 0) || (dims != null ? dims.height : void 0)) {
    dims = {
      width: Math.max(1, parseInt($('#svg-stat-width').text(), 10)),
      height: Math.max(1, parseInt($('#svg-stat-height').text(), 10))
    };
  }
  aspect = dims.width / dims.height;
  $('#svg-stat-aspect').text(round(aspect, 2));
  $('#target').attr({
    width: dims.width,
    height: dims.height
  });
  return doGraph();
};

/*
# save the graph to local storage
*/


saveGraph = function() {
  var bc, clickHandler, cloned, container, height, width;
  cloned = $('#target').clone();
  cloned.attr({
    id: null
  });
  width = parseInt(cloned.attr('width'), 10);
  height = parseInt(cloned.attr('height'), 10);
  cloned.attr({
    width: width / 5,
    height: height / 5
  });
  cloned[0].setAttribute('viewBox', "0 0 " + width + " " + height);
  clickHandler = function() {
    return importSVG(bc.find('.thumbnail-svg').html());
  };
  container = $('<div></div>');
  container.append(cloned);
  container.click(clickHandler);
  bc = $($('#thumbnails').children()[0]).clone();
  bc.click(clickHandler);
  bc.find('.thumbnail-svg').html(cloned);
  bc.button();
  return $($('#thumbnails').children()[0]).after(bc);
};

doGraph = function() {
  AsciiSVG.updatePicture(inputArea.getValue(), $("#target")[0]);
  return $("#target").append("<asciisvg>" + inputArea.getValue() + "</asciisvg>");
};

importSVG = function(svgText) {
  var height, match, previousAsciisvgCommand, svg, viewBox, width;
  svg = $(svgText);
  viewBox = svg[0].getAttribute('viewBox');
  width = svg[0].getAttribute('width');
  height = svg[0].getAttribute('height');
  if (viewBox != null) {
    match = viewBox.match(/\d+ \d+ (\d+) (\d+)/);
    width = match != null ? match[1] : void 0;
    height = match != null ? match[2] : void 0;
  }
  svg.attr({
    width: width,
    height: height,
    id: 'target'
  });
  $("#outputNode").html(svg);
  previousAsciisvgCommand = $("#outputNode svg asciisvg").text();
  if (previousAsciisvgCommand) {
    inputArea.setValue(previousAsciisvgCommand);
  }
  $('#svg-stat-width').text(width);
  $('#svg-stat-height').text(height);
  return resizeSvg();
};

genTwoPoints = function() {
  var m, match, outputEquation, text, x1, x2, y1, y2;
  text = $("#twopoints").val();
  match = text.match(/\((.*),(.*)\)\s*;\s*\((.*),(.*)\)/);
  if (!match) {
    return;
  }
  x1 = void 0;
  y1 = void 0;
  x2 = void 0;
  y2 = void 0;
  x1 = match[1];
  y1 = match[2];
  x2 = match[3];
  y2 = match[4];
  m = (y2 - y1) / (x2 - x1);
  outputEquation = "plot(\"" + m + "*(x-(" + x1 + "))+(" + y1 + ")\")\n";
  outputEquation += "dot([" + x1 + "," + y1 + "], \"closed\")\n";
  outputEquation += "dot([" + x2 + "," + y2 + "], \"closed\")\n";
  return $("#genout").val(outputEquation);
};

genPointSlope = function() {
  var m, match, outputEquation, text, x1, y1;
  text = $("#pointslope").val();
  match = text.match(/m=(.*)\s*;\s*\((.*),(.*)\)/);
  if (!match) {
    return;
  }
  m = void 0;
  x1 = void 0;
  y1 = void 0;
  m = match[1];
  x1 = match[2];
  y1 = match[3];
  outputEquation = "plot(\"" + m + "*(x-(" + x1 + "))+(" + y1 + ")\")\n";
  outputEquation += "dot([" + x1 + "," + y1 + "], \"closed\")\n";
  return $("#genout").val(outputEquation);
};

downloadSVG = function() {
  $("#doGraph").click();
  return document.location.href = "data:application/octet-stream;base64," + btoa($("#outputNode").html());
};

/*
# Drag and drop stuff
*/


decodeDataURI = function(dataURI) {
  var content, data, meta;
  content = dataURI.indexOf(",");
  meta = dataURI.substr(5, content).toLowerCase();
  data = decodeURIComponent(dataURI.substr(content + 1));
  if (/;\s*base64\s*[;,]/.test(meta)) {
    data = atob(data);
  }
  if (/;\s*charset=[uU][tT][fF]-?8\s*[;,]/.test(meta)) {
    data = decodeURIComponent(escape(data));
  }
  return data;
};

dragEnter = function(evt) {
  evt.stopPropagation();
  return evt.preventDefault();
};

dragExit = function(evt) {
  evt.stopPropagation();
  return evt.preventDefault();
};

dragOver = function(evt) {
  evt.stopPropagation();
  return evt.preventDefault();
};

drop = function(evt) {
  var count, files;
  evt.stopPropagation();
  evt.preventDefault();
  files = evt.dataTransfer.files;
  count = files.length;
  if (count > 0) {
    return handleFiles(files);
  }
};

openFile = function(evt) {
  var files;
  files = evt.target.files;
  if (files.length > 0) {
    return handleFiles(files);
  }
};

handleFiles = function(files) {
  var file, reader;
  file = files[0];
  document.getElementById("droplabel").innerHTML = "Processing " + file.name;
  reader = new FileReader();
  reader.onprogress = handleReaderProgress;
  reader.onloadend = handleReaderLoadEnd;
  return reader.readAsDataURL(file);
};

handleReaderProgress = function(evt) {
  var loaded;
  if (evt.lengthComputable) {
    return loaded = evt.loaded / evt.total;
  }
};

handleReaderLoadEnd = function(evt) {
  var data;
  if (evt.target.error) {
    $("#errorCode").html(evt.target.error + " Error Code: " + evt.target.error.code + " ");
    $("#errorDialog").dialog("open");
    return;
  }
  data = decodeDataURI(evt.target.result);
  return importSVG(data);
};
