// Generated by CoffeeScript 1.3.1
/*
# Smart typeof function that will recognize builtin types as well as objects
# that are instances of those types.
*/

var FileHandler, deleteGraphFromGraphData, historyClearAll, historyLoadFromFile, initializeGraphHistory, loadGraph, loadGraphFromGraphData, makeEditable, resizeGraph, round, saveGraph, setGraphFromSvg, typeOf, updateGraph, validateNumber;

typeOf = function(obj) {
  var constructor, constructorName, guess, objectTypes, type;
  guess = typeof obj;
  if (guess !== 'object') {
    return guess;
  }
  if (obj === null) {
    return 'null';
  }
  objectTypes = {
    'array': Array,
    'boolean': Boolean,
    'number': Number,
    'string': String
  };
  for (type in objectTypes) {
    constructor = objectTypes[type];
    if (obj instanceof constructor) {
      return type;
    }
  }
  constructorName = obj.constructor.name;
  if (constructorName === 'Object') {
    return 'object';
  }
  return constructorName;
};

/*
# Set up the interface
*/


$(document).ready(function() {
  $('.tabs').tabs();
  $('.button').button();
  window.inputArea = CodeMirror.fromTextArea($("#code")[0], {
    indentWithTabs: true,
    smartIndent: false,
    mode: "text/javascript"
  });
  $('.svg-stat.editable').map(function() {
    return makeEditable(this, resizeGraph);
  });
  $('#update-graph').click(updateGraph);
  $('#save-graph').click(saveGraph);
  $('#load-graph').click(loadGraph);
  $('#history-load-from-file').click(historyLoadFromFile);
  $('#history-clear-all').click(historyClearAll);
  $('#dropbox').hide();
  $('body')[0].addEventListener('dragenter', FileHandler.dragEnter, false);
  $('body')[0].addEventListener('dragexit', FileHandler.dragExit, false);
  $('#dropbox')[0].addEventListener('dragover', FileHandler.dragOver, false);
  $('body')[0].addEventListener('drop', FileHandler.drop, false);
  resizeGraph();
  return initializeGraphHistory();
});

/*
# Draw the current graph to #svg-preview
*/


updateGraph = function() {
  try {
    AsciiSVG.updatePicture(inputArea.getValue(), $("#target")[0]);
  } catch (err) {
    if (err.lineNumber != null) {
      alert("" + err + "\nline number: " + err.lineNumber + "\nline: " + err.sourceLine);
    } else {
      throw err;
    }
  }
  return $("#target").append("<asciisvg>" + inputArea.getValue() + "</asciisvg>");
};

/*
# Saves the graph currently in the preview area
*/


saveGraph = function() {
  var cloned, graphData, htmlifiedSvg, savedGraphList, svgText, thumbnail;
  updateGraph();
  cloned = $('#target').clone();
  htmlifiedSvg = $('<div></div>').append(cloned);
  svgText = htmlifiedSvg.html();
  graphData = new GraphData(svgText);
  graphData.onclick = loadGraphFromGraphData;
  graphData.ondelete = deleteGraphFromGraphData;
  thumbnail = graphData.createThumbnail();
  graphData.makeDeletable();
  $('#history-gallery .gallery-container').append(thumbnail);
  $.jStorage.reInit();
  savedGraphList = $.jStorage.get('savedgraphs') || {};
  savedGraphList[graphData.hash()] = graphData.toJSON();
  $.jStorage.set('savedgraphs', savedGraphList);
  return document.location.href = "data:application/octet-stream;base64," + btoa(svgText);
};

loadGraph = function() {
  var dialog, fileInput;
  if (!navigator.userAgent.match('Chrome')) {
    fileInput = $('<input type="file" id="files" name="files[]" accept="image/svg+xml" />');
    fileInput.change(function(event) {
      var files;
      files = event.target.files;
      return FileHandler.handleFiles(files);
    });
    return fileInput.trigger('click');
  } else {
    dialog = $('<div>\n    <h3>Browse for the file you wish to upload</h3>\n    <input type="file" id="files" name="files[]" accept="image/svg+xml" />\n</div>');
    $(document.body).append(dialog);
    dialog.dialog({
      height: 300,
      width: 500,
      modal: true
    });
    return dialog.find('input').change(function(event) {
      var files;
      files = event.target.files;
      FileHandler.handleFiles(files);
      return dialog.remove();
    });
  }
};

resizeGraph = function(dims) {
  var aspect;
  if (!(dims != null ? dims.width : void 0) || (dims != null ? dims.height : void 0)) {
    dims = {
      width: Math.max(1, parseInt($('#svg-stat-width').text(), 10)),
      height: Math.max(1, parseInt($('#svg-stat-height').text(), 10))
    };
  }
  aspect = dims.width / dims.height;
  $('#svg-stat-aspect').text(round(aspect, 2));
  $('#target').attr({
    width: dims.width,
    height: dims.height
  });
  return updateGraph();
};

setGraphFromSvg = function(svgText) {
  var graphData;
  graphData = new GraphData(svgText);
  inputArea.setValue(graphData.javascriptText);
  $('#svg-stat-width').text(graphData.width);
  $('#svg-stat-height').text(graphData.height);
  $('#svg-preview').html(graphData.svgText);
  return $('#svg-preview svg').attr({
    id: 'target',
    width: graphData.width,
    height: graphData.height
  });
};

initializeGraphHistory = function() {
  var graph, key, savedGraphList, thumbnail, thumnailList, _results;
  thumnailList = $('#history-gallery .gallery-container');
  $.jStorage.reInit();
  savedGraphList = $.jStorage.get('savedgraphs') || {};
  thumnailList.empty();
  _results = [];
  for (key in savedGraphList) {
    graph = savedGraphList[key];
    graph = GraphData.fromJSON(graph);
    graph.onclick = loadGraphFromGraphData;
    graph.ondelete = deleteGraphFromGraphData;
    thumbnail = graph.createThumbnail();
    graph.makeDeletable();
    _results.push(thumnailList.append(thumbnail));
  }
  return _results;
};

loadGraphFromGraphData = function(graphData) {
  if (graphData.width) {
    $('#svg-stat-width').text(graphData.width);
  }
  if (graphData.height) {
    $('#svg-stat-height').text(graphData.height);
  }
  inputArea.setValue(graphData.javascriptText);
  return resizeGraph();
};

historyLoadFromFile = function() {
  return loadGraph();
};

historyClearAll = function() {
  $('#history-gallery .gallery-container').empty();
  $.jStorage.reInit();
  return $.jStorage.set('savedgraphs', {});
};

deleteGraphFromGraphData = function(graphData) {
  var hash, savedGraphList;
  if (typeOf(graphData) === 'GraphData') {
    hash = graphData.hash();
  } else {
    hash = graphData;
  }
  $.jStorage.reInit();
  savedGraphList = $.jStorage.get('savedgraphs') || {};
  delete savedGraphList[hash];
  $.jStorage.set('savedgraphs', savedGraphList);
  if (graphData.thumbnail != null) {
    return graphData.thumbnail.remove();
  }
};

FileHandler = {
  decodeDataURI: function(dataURI) {
    var content, data, meta;
    content = dataURI.indexOf(",");
    meta = dataURI.substr(5, content).toLowerCase();
    data = decodeURIComponent(dataURI.substr(content + 1));
    if (/;\s*base64\s*[;,]/.test(meta)) {
      data = atob(data);
    }
    if (/;\s*charset=[uU][tT][fF]-?8\s*[;,]/.test(meta)) {
      data = decodeURIComponent(escape(data));
    }
    return data;
  },
  handleFiles: function(files) {
    var file, reader;
    file = files[0];
    reader = new FileReader();
    reader.onprogress = FileHandler.handleReaderProgress;
    reader.onloadend = FileHandler.handleReaderLoadEnd;
    return reader.readAsDataURL(file);
  },
  handleReaderProgress: function(evt) {
    var percentLoaded;
    if (evt.lengthComputable) {
      return percentLoaded = evt.loaded / evt.total;
    }
  },
  handleReaderLoadEnd: function(evt) {
    var data;
    if (evt.target.error) {
      throw new Error(evt.target.error + " Error Code: " + evt.target.error.code + " ");
      return;
    }
    data = FileHandler.decodeDataURI(evt.target.result);
    return setGraphFromSvg(data);
  },
  dragEnter: function(evt) {
    $('#dropbox').show();
    $('.tabs').hide();
    evt.stopPropagation();
    return evt.preventDefault();
  },
  dragExit: function(evt) {
    $('#dropbox').hide();
    $('#dropbox').removeClass('dropbox-hover');
    $('.tabs').show();
    evt.stopPropagation();
    return evt.preventDefault();
  },
  dragOver: function(evt, b) {
    $('#dropbox').addClass('dropbox-hover');
    evt.stopPropagation();
    return evt.preventDefault();
  },
  drop: function(evt) {
    var count, files;
    evt.stopPropagation();
    evt.preventDefault();
    files = evt.dataTransfer.files;
    count = files.length;
    if (count > 0) {
      FileHandler.handleFiles(files);
    }
    return FileHandler.dragExit();
  }
};

/*
# interface utility functions
*/


round = function(num, places) {
  var p;
  p = Math.pow(10, places);
  return Math.round(num * p) / p;
};

validateNumber = function(txt, positive, integer, max, min) {
  var ret;
  if (positive == null) {
    positive = true;
  }
  if (integer == null) {
    integer = true;
  }
  if (max == null) {
    max = 10e10;
  }
  if (min == null) {
    min = -10e10;
  }
  ret = 0;
  switch (typeOf(txt)) {
    case 'number':
      ret = txt;
      break;
    case 'string':
      ret = parseFloat(txt);
  }
  if (isNaN(ret)) {
    ret = 0;
  }
  if (ret > max) {
    ret = max;
  } else if (ret < min) {
    ret = min;
  }
  if (positive) {
    ret = Math.abs(ret);
  }
  if (integer) {
    ret = Math.round(ret);
  }
  return ret;
};

makeEditable = function(element, editFinishedCallback) {
  var previousValue;
  if (editFinishedCallback == null) {
    editFinishedCallback = (function() {
      return null;
    });
  }
  element = $(element);
  previousValue = element.html();
  element.live('focus', function() {
    var $this;
    $this = $(this);
    $this.data('before', $this.html());
    $this.data('initial-text', $this.html());
    return $this;
  });
  element.live('blur keyup paste', function() {
    var $this;
    $this = $(this);
    if ($this.data('before') !== $this.html()) {
      $this.data('before', $this.html());
      $this.trigger('change');
    }
    return $this;
  });
  element.keydown(function(event) {
    var $this;
    $this = $(this);
    if (event.which === 13) {
      $(this).blur();
      event.stopPropagation();
    }
    if (event.which === 27) {
      $this.html($this.data('initial-text'));
      $this.blur();
      return event.stopPropagation();
    }
  });
  return element.blur(function(event) {
    var $this, num, text;
    $this = $(this);
    text = $this.text();
    num = validateNumber(text);
    if (num === 0) {
      $this.html($this.data('initial-text'));
    } else {
      $this.html('' + num);
    }
    if ($this.html() !== previousValue) {
      previousValue = $this.html();
      return editFinishedCallback($this.html());
    }
  });
};
